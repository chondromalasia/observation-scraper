name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: heathgordon/observation-scraper
  
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
    
    services:
      zookeeper:
        image: confluentinc/cp-zookeeper:latest
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
        ports:
          - 2181:2181
      
      kafka:
        image: confluentinc/cp-kafka:latest
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        ports:
          - 9092:9092
        options: >-
          --health-cmd "kafka-broker-api-versions --bootstrap-server localhost:9092"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        pip install -e .
    
    - name: Wait for Kafka to be ready
      run: |
        timeout 60 bash -c 'until nc -z localhost 9092; do sleep 1; done'
    
    - name: Run unit tests
      run: |
        python -m unittest src.tests.producers.test_producer.TestObservationProducer -v
    
    - name: Run integration tests
      env:
        RUN_INTEGRATION_TESTS: true
        KAFKA_BOOTSTRAP_SERVERS: localhost:9092
      run: |
        python -m unittest src.tests.producers.test_producer.TestObservationProducerIntegration -v
    
    - name: Run all tests with coverage (if using pytest)
      if: false  # Enable this if you switch to pytest
      run: |
        pytest src/tests/ -v --cov=src/observation_scraper --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      if: github.ref == 'refs/heads/main' && false  # Enable when you have coverage setup
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false